<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!--
		Spring ApplicationContext配置文件的路径。
		可使用通配符，多个路径用逗号分隔。
		此参数用于后面的"Spring-Context loader"
		配置spring的监听器
		配置PASM文件
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath*:resources/context/*.xml
			classpath*:security-cas-rmi.xml
		</param-value>
	</context-param>

	<display-name>propAssess</display-name>
	<!--
		如果不定义webAppRootKey参数，那么webAppRootKey就是缺省的"webapp.root"。
		但最好设置，以免项目之间的名称冲突。
		定义以后，在Web Container启动时将把ROOT的绝对路径写到系统变量里。
		然后log4j的配置文件里就可以用${ sobergo.root }来表示Web目录的绝对路径，把log文件存放于webapp中。
		此参数用于后面的"Log4jConfigListener"
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>propAssess.root</param-value>
	</context-param>

	<!--
		Spring ApplicationContext配置文件的路径。可使用通配符，多个路径用逗号分隔。
		此参数用于后面的"Spring-Context loader"
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/classes/log4j.properties</param-value>
	</context-param>

	<!--Spring默认刷新Log4j配置文件的间隔,单位为millisecond-->
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>60000</param-value>
	</context-param>

	<context-param>
		<param-name>initsec</param-name>
		<param-value>WEB-INF/initsec.properties</param-value>
	</context-param>

	<!--默认i18n资源文件-->
	<context-param>
		<param-name>
			javax.servlet.jsp.jstl.fmt.localizationContext
		</param-name>
		<param-value>resources/i18n/messages</param-value>
	</context-param>

	<!--famous Character Encoding filter-->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--  单点退出 -->
	<filter>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<filter-class>
			org.jasig.cas.client.session.SingleSignOutFilter
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Acegi代理过滤器定义 -->
	<filter>
		<filter-name>Acegi Filter Chain Proxy</filter-name>
		<filter-class>
			org.acegisecurity.util.FilterToBeanProxy
		</filter-class>
		<init-param>
			<param-name>targetClass</param-name>
			<param-value>
				org.acegisecurity.util.FilterChainProxy
			</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>Acegi Filter Chain Proxy</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>P3PURLFilter</filter-name>
		<filter-class>
			com.ultrapower.accredit.common.P3PURLFilter
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>P3PURLFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- cas客户端ticket代理初始化 -->
	<servlet>
		<servlet-name>casproxy</servlet-name>
		<servlet-class>
			edu.yale.its.tp.cas.proxy.ProxyTicketReceptor
		</servlet-class>
		<init-param>
			<param-name>edu.yale.its.tp.cas.proxyUrl</param-name>
			<param-value>
				http://192.168.91.237:58045/ucas/proxy
			</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>casproxy</servlet-name>
		<url-pattern>/casProxy/*</url-pattern>
	</servlet-mapping>


	<!-- 配置OpenSessionInViewFilter监听 -->
	<filter>
		<filter-name>hibernateFilter</filter-name>
		<filter-class>
			org.springframework.orm.hibernate3.support.OpenSessionInViewFilter
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>hibernateFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 开启Spring监听 -->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<!-- bean 缓冲泄露处理 -->
	<listener>
		<listener-class>
			org.springframework.web.util.IntrospectorCleanupListener
		</listener-class>
	</listener>


	<!-- Spring日志监听 -->
	<listener>
		<listener-class>
			org.springframework.web.util.Log4jConfigListener
		</listener-class>
	</listener>

	<!--Spring Dispatch Servlet,Spring MVC的入口，按servlet-name, 载入springmvc-servlet.xml-->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet>
		<servlet-name>dwr-invoker</servlet-name>
		<servlet-class>
			org.directwebremoting.servlet.DwrServlet
		</servlet-class>
		<init-param>
			<param-name>debug</param-name>
			<param-value>true</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>dwr-invoker</servlet-name>
		<url-pattern>/dwr/*</url-pattern>
	</servlet-mapping>

	<!-- 初始化权限资源 -->
	<servlet>
		<servlet-name>InitSecurity</servlet-name>
		<servlet-class>
			com.ultrapower.assess.security.InitSecurity
		</servlet-class>
		<load-on-startup>3</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<!--session 超时定义-->
	<session-config>
		<session-timeout>10000</session-timeout>
	</session-config>

	<!--默认首页定义-->
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

</web-app>
